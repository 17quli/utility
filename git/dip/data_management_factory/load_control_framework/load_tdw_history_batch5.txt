/********************************************************************************************
15/01/2020 ird0sxr1 First Cut for Batch 5 - tblNZ_TaxPrepLink for now. 
17/01/2020 ird0sxr1 TDW history for tblnz_rtnlineitem and tblnz_bcmpayerinfo will also be migrated. So we need to add details
                    below for these 2 tables as well.
22/01/2020 ird0sxr1 Moved tblnz_rtnlineitem and tblnz_bcmpayerinfo from here to Batch 6 script as they will now be part 
                    of batch 6.


*********************************************************************************************/

-- Backup existing RAW START tables touched by history migration process

select count(*) as raw_count from  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink;
create table  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink_20200130 stored as parquet
as select * from  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink;
select count(*) as backup_count from  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink_20200130;



-- Backup existing RAW TDW tables touched by history migration process

select count(*) as raw_tdw_count from  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink;
create table  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink_20200130 stored as parquet
as select * from  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink;
select count(*) as raw_tdw_backup_count from  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink_20200130;


-- Truncate existing RAW tables for START

truncate table  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink;
select count(*) as raw_count from  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink;


-- Truncate existing RAW tables for TDW

truncate table  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink;
select count(*) as raw_tdw_count from  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink;


-- Run Checks on TDW tables and START tables in SAS EG or SAS Studio (Use TDW History Load Check code: History Analysis - STEP 1). Export Results as PDF.

-- Run the Code generated by SAS DI Studio Jobs in SAS EG or SAS Studio to populate the RAW TDW tables. Save the Logs.

-- Check records in RAW TDW tables
select count(*) as raw_tdw_count from  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink;

-- Using Impala commands Load data manually from RAW TDW tables into RAW START tables

INSERT INTO TABLE  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink
SELECT
CAST(FLNGDOCKEY AS INT) AS flngDocKey,
CAST(FLNGFROMCUSTOMERKEY AS INT) AS flngFromCustomerKey,
CAST(FLNGLINKKEY AS INT) AS flngLinkKey,
CAST(FINTFROMPROFILENUMBER AS SMALLINT) AS fintFromProfileNumber,
CAST(FLNGFROMACCOUNTKEY AS INT) AS flngFromAccountKey,
CAST(FLNGTOCUSTOMERKEY AS INT) AS flngToCustomerKey,
CAST(FINTTOPROFILENUMBER AS SMALLINT) AS fintToProfileNumber,
CAST(FLNGTOACCOUNTKEY AS INT) AS flngToAccountKey,
CAST(FSTRLINKTYPE AS VARCHAR(12)) AS fstrLinkType,
CAST(FBLNMAILREDIRECT AS SMALLINT) AS fblnMailRedirect,
CAST(FBLNDISBURSEMENTREDIRECT AS SMALLINT) AS fblnDisbursementRedirect,
CAST(FDTMCOMMENCE AS TIMESTAMP) AS fdtmCommence,
CAST(FDTMCEASE AS TIMESTAMP) AS fdtmCease,
CAST(FBLNACTIVE AS SMALLINT) AS fblnActive,
CAST(FSTRWHO AS VARCHAR(20)) AS fstrWho,
CAST(EFFECTIVE_FROM AS TIMESTAMP) AS FDTMWHEN,
CAST(record_effective_timestamp AS TIMESTAMP) AS record_effective_timestamp,
CAST(record_expiry_timestamp AS TIMESTAMP) AS record_expiry_timestamp,
--CAST(CURRENT_REC_FLAG AS VARCHAR(1)) AS record_active_flag,
CAST(RECORD_ACTIVE_FLAG AS VARCHAR(1)) AS record_active_flag,
CAST('N' AS VARCHAR(1)) AS record_deleted_flag,
CAST(insert_object_run_key AS INT) AS insert_object_run_key,
CAST(update_object_run_key AS INT) AS update_object_run_key
FROM  ${target_db=Enter the target database name here}_raw.tdw_tbl_nz_taxpreplink;


-- Check row counts of RAW tables with TDW history loaded:

select count(*) as raw_new_count from  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink;
select count(distinct FLNGDOCKEY) as distinct_keys_count FROM  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink;
select count(*) as low_date_count FROM  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink where record_effective_timestamp = '1800-01-01 00:00:00';
select count(*) as high_date_count FROM  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink where record_expiry_timestamp = '9000-12-31 00:00:00';

-- Using SAS EG or SAS Studio, run the corresponding RAW START jobs to load data to:
-- This will be our first incremental job to load data on top of the data from TDW.
-- Verify jobs complete ok

-- Check the tables after Raw Incrmental load is completed
select count(*) as raw_new_count from  ${target_db=Enter the target database name here}_raw.app_tblnz_taxpreplink;

-- Run Checks on RAW tables in SAS EG or SAS Studio (Use TDW History Load Check code: History Analysis - STEP 2 and History Analysis - STEP 3). Export Results as PDF.


######################################################################################################################################################################################333

--- Conduct sanity checks for individual keys (to be done by individual devlopers as needed if applicable)
select * from  ${target_db=Enter the target database name here}_raw.app_tblperiod
limit 10;

select  flngaccountkey, fdtmFilingPeriod, count(1)
from ${target_db=Enter the target database name here}_raw.app_tblperiod
where record_expiry_timestamp='9000-12-31 00:00:00'
group by flngaccountkey, fdtmFilingPeriod
having count(1)>1

select count(1) from ${target_db=Enter the target database name here}_raw.app_tblperiod
where record_active_flag='Y' --88512347 88510544

select count(*) from ${target_db=Enter the target database name here}_raw.app_tblperiod
where record_active_flag='Y' and record_expiry_timestamp <> '9000-12-31 00:00:00';

select * from ${target_db=Enter the target database name here}_raw.app_tblperiod
where record_active_flag='Y' and record_expiry_timestamp <> '9000-12-31 00:00:00';

select flngaccountkey,fdtmfilingperiod,record_active_flag,record_effective_timestamp,record_expiry_timestamp,insert_object_run_key,update_object_run_key,* 
from ${target_db=Enter the target database name here}_raw.app_tblperiod
where flngaccountkey=38941696 and fdtmfilingperiod='2018-05-31 00:00:00'

select flngaccountkey,fdtmfilingperiod,record_active_flag,record_effective_timestamp,record_expiry_timestamp,insert_object_run_key,update_object_run_key,* 
from ${target_db=Enter the target database name here}_raw.tdw_tbl_period
where flngaccountkey=38941696 and fdtmfilingperiod='2018-05-31 00:00:00'
order by record_effective_timestamp asc

select count(1) from ${target_db=Enter the target database name here}_raw.app_tblperiod
where insert_object_run_key=11613 --1681006

select * from ${target_db=Enter the target database name here}_raw.app_tblperiod
where insert_object_run_key=11613 --1681006

select * from ${target_db=Enter the target database name here}_raw.app_tblperiod
where flngaccountkey=832411712	and fdtmFilingPeriod='2002-03-31 00:00:00'
order by record_effective_timestamp asc


--  ${target_db=Enter the target database name here}_raw.app_tblcustomerstd
select * from  ${target_db=Enter the target database name here}_raw.app_tblcollect
where flngcollectkey=411150
order by record_effective_timestamp asc;