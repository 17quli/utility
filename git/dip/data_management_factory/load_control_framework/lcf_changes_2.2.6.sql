/*
--This script will cleanup SYSTEM_SCHEMA table - a left over from Release one and introduce two new tables called SRC_TGT_SYTEM,SRC_TGT_SCHEMA.
--It will also recreate OBJECT, OBJECT_HIST tables with new column PARTITION_KEY and resize the CHANGE_CAPTURE,EFFECTIVE_TIMESTAMP columns
--and change the data type of NATURAL_KEY,PRIMARY_KEY to VARCHAR2 instead of CLOB.
--It will also introduce two new tables LOAD_PATTERN an ETL_RESOURCES which will be useful for Oracle Apex.

Change Log
-----------

14052020 drm Data fix for prod only. Set system_key to 3 because NZO/NZP issues.
*/
 
 
 -------------------------------------------------------
--  EXTRACT_OBJECT
-------------------------------------------------------- 

CREATE TABLE EXTRACT_OBJECT_&current_date
as SELECT * FROM EXTRACT_OBJECT;


ALTER TABLE EXTRACT_OBJECT RENAME COLUMN COL1 TO NUM_ROWS;
ALTER TABLE EXTRACT_OBJECT RENAME COLUMN COL2 TO PARTITION_KEY;
ALTER TABLE EXTRACT_OBJECT MODIFY NUM_ROWS NUMBER;
ALTER TABLE EXTRACT_OBJECT MODIFY PARTITION_KEY VARCHAR2(4000);
-------------------------------------------------------
--  Drop existing constraints 
--------------------------------------------------------

  ALTER TABLE OBJECT 
  DROP CONSTRAINT SYSTEM_SCHEMA_OBJECT_FK;
 
-------------------------------------------------------
--  Rename existing tables 
-------------------------------------------------------- 
  RENAME  SYSTEM_SCHEMA 
  TO SYSTEM_SCHEMA_&current_date;
  
  RENAME SYSTEM_SCHEMA_HIST TO 
  SYSTEM_SCHEMA_HIST_&current_date;
  
-------------------------------------------------------
--  SRC_TGT_SCHEMA
--------------------------------------------------------

  CREATE TABLE LCF.SRC_TGT_SCHEMA 
   (	
  SYSTEM_SCHEMA_KEY NUMBER(10,0), 
	SCHEMA_NAME VARCHAR2(30), 
	SAS_LIB_REF VARCHAR2(30), 
	SCHEMA_PREFIX VARCHAR2(10), 
	SYSTEM_KEY NUMBER(10,0)
   ) ;
--------------------------------------------------------
--  SRC_TGT_SCHEMA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX LCF.SRC_TGT_SCHEMA_PK 
  ON LCF.SRC_TGT_SCHEMA (SYSTEM_SCHEMA_KEY);
--------------------------------------------------------
--  Constraints for Table SRC_TGT_SCHEMA
--------------------------------------------------------

  ALTER TABLE LCF.SRC_TGT_SCHEMA MODIFY (SYSTEM_SCHEMA_KEY NOT NULL ENABLE);
  ALTER TABLE LCF.SRC_TGT_SCHEMA ADD CONSTRAINT SRC_TGT_SCHEMA_PK PRIMARY KEY (SYSTEM_SCHEMA_KEY)
  USING INDEX SRC_TGT_SCHEMA_PK;

--------------------------------------------------------
--  DDL for Table SRC_TGT_SYSTEM
--------------------------------------------------------

  CREATE TABLE LCF.SRC_TGT_SYSTEM 
   (
   SYSTEM_KEY NUMBER(10,0), 
	 SYSTEM_NAME VARCHAR2(30), 
	 SYSTEM_TYPE VARCHAR2(30)
   ) ;

--------------------------------------------------------
--  seq_SRC_TGT_SYSTEM_KEY
--------------------------------------------------------
  
DROP SEQUENCE   LCF.seq_SRC_TGT_SYSTEM_KEY;
CREATE SEQUENCE LCF.seq_SRC_TGT_SYSTEM_KEY START WITH 1;

--------------------------------------------------------
--  DDL for Index SRC_TGT_SYSTEM_PK
--------------------------------------------------------
CREATE UNIQUE INDEX LCF.SRC_TGT_SYSTEM_PK ON LCF.SRC_TGT_SYSTEM (SYSTEM_KEY)   ;
--------------------------------------------------------
--  Constraints for Table SRC_TGT_SYSTEM
--------------------------------------------------------
ALTER TABLE LCF.SRC_TGT_SYSTEM MODIFY (SYSTEM_KEY NOT NULL ENABLE);
ALTER TABLE LCF.SRC_TGT_SYSTEM ADD CONSTRAINT SRC_TGT_SYSTEM_PK PRIMARY KEY (SYSTEM_KEY)
USING INDEX SRC_TGT_SYSTEM_PK;

--------------------------------------------------------
--  TRG_SRC_TGT_SYSTEM_KEY
--------------------------------------------------------

CREATE OR REPLACE TRIGGER TRG_SRC_TGT_SYSTEM_KEY
BEFORE INSERT ON LCF.SRC_TGT_SYSTEM
FOR EACH ROW
BEGIN
	SELECT seq_SRC_TGT_SYSTEM_KEY.nextval
		INTO :NEW.SYSTEM_KEY
		FROM DUAL;
END;
/

--------------------------------------------------------
--  Insert SRC_TGT_SYSTEM
--------------------------------------------------------

  INSERT INTO SRC_TGT_SYSTEM (SYSTEM_NAME,SYSTEM_TYPE) VALUES ('LCF',	'ORACLE');
  INSERT INTO SRC_TGT_SYSTEM (SYSTEM_NAME,SYSTEM_TYPE) VALUES ('EDW',	'ORACLE');
  INSERT INTO SRC_TGT_SYSTEM (SYSTEM_NAME,SYSTEM_TYPE) VALUES ('START',	'MSSQL');
  INSERT INTO SRC_TGT_SYSTEM (SYSTEM_NAME,SYSTEM_TYPE) VALUES ('ALCZR',	'ORACLE');
  INSERT INTO SRC_TGT_SYSTEM (SYSTEM_NAME,SYSTEM_TYPE)VALUES ('REFINED',	'IMPALA');
  INSERT INTO SRC_TGT_SYSTEM (SYSTEM_NAME,SYSTEM_TYPE)VALUES ('RAW'	,'IMPALA');
  INSERT INTO SRC_TGT_SYSTEM (SYSTEM_NAME,SYSTEM_TYPE)VALUES ('INTERMEDIATE',	'IMPALA');
  COMMIT;
  
 SELECT * FROM SRC_TGT_SYSTEM;
 
 --------------------------------------------------------
--  Insert SRC_TGT_SCHEMA
--------------------------------------------------------
-- TRUNCATE TABLE  SRC_TGT_SCHEMA;
 INSERT INTO SRC_TGT_SCHEMA
 (SYSTEM_SCHEMA_KEY,SCHEMA_NAME,SAS_LIB_REF,SCHEMA_PREFIX,SYSTEM_KEY)
 SELECT 
 SYSTEM_SCHEMA_KEY,
 SCHEMA_NAME,
 SAS_LIB_REF,
 SCHEMA_PREFIX,
 CASE WHEN SYSTEM_TYPE='ORACLE' AND SYSTEM_NAME ='LCF' THEN 1
            WHEN SYSTEM_TYPE='ORACLE' AND SCHEMA_NAME IN ('17THHO','DSS','KXT5','DATAMART','CMEOWN','67AWCH','TDW','SXT4','SUMMARY','BESSOWN') THEN 2
            WHEN SYSTEM_TYPE='MSSQL' AND SCHEMA_NAME IN ('NZO_GTFRD','NZP_GTWRQ','NZP_GTAPP','NZO_GTWRQ','NZO_GTAPP','NZO_GTSTC','NZO_GTREF','NZS_GTREF','NZS_GTAPP','NZO_GTWEB') THEN 3
            WHEN SYSTEM_TYPE='ORACLE' AND SCHEMA_NAME IN ('MODELLING',	'ALCMOD',	'PROPERTY','EFTPOS','COMPANIES','DIA_DEATHS') THEN 4
            WHEN SYSTEM_TYPE='IMPALA' AND SCHEMA_NAME='INTERMEDIATE' THEN 5
            WHEN SYSTEM_TYPE='IMPALA' AND SCHEMA_NAME='RAW' THEN 6
            WHEN SYSTEM_TYPE='IMPALA' AND SCHEMA_NAME='REFINED' THEN 7
            END SYSTEM_KEY
 FROM SYSTEM_SCHEMA_&current_date;
  
 COMMIT; 
--------------------------------------------------------
--  OBJECT
--------------------------------------------------------
UPDATE OBJECT SET CHANGE_CAPTURE_TIMESTAMP_COLUMN=NULL
WHERE SOURCE_OBJECT_NAME='MD_TEST_CUSTOMSQL_P2';
COMMIT;

RENAME  OBJECT TO OBJECT_&current_date;


  CREATE TABLE LCF.OBJECT 
   (	
   OBJECT_KEY NUMBER(10,0), 
	SYSTEM_SCHEMA_KEY NUMBER(10,0), 
	TARGET_OBJECT_NAME VARCHAR2(30), 
	OBJECT_SHORT_NAME VARCHAR2(25), 
	TARGET_DB VARCHAR2(30 BYTE) , 
	SOURCE_OBJECT_NAME VARCHAR2(30), 
	SOURCE_OBJECT_TYPE VARCHAR2(5) , 
	SAS_LIB_REF VARCHAR2(30), 
	PK_COLUMN_NAMES VARCHAR2(500), 
	NK_COLUMN_NAMES VARCHAR2(500), 
	EXCLUDED_COLUMNS CLOB, 
	LOAD_PATTERN_NAME VARCHAR2(30 ) , 
	SENSITIVE_DATA_FLAG VARCHAR2(1), 
	RETENTION_KEY NUMBER(10,0), 
	CUSTOM_SQL CLOB, 
	CHANGE_CAPTURE_TIMESTAMP_COLUMN VARCHAR2(50), 
	HISTORY_LOADED_FROM_TDW VARCHAR2(1 ), 
	HISTORY_TYPE VARCHAR2(5), 
	EFFECTIVE_FROM_TIMESTAMP_COLUMN VARCHAR2(50 ), 
	EFFECTIVE_TO_TIMESTAMP_COLUMN VARCHAR2(50 ), 
	EFFECTIVE_TIMESTAMP_GRAIN VARCHAR2(30 ), 
	PURGE_GRAIN VARCHAR2(30), 
	DUPLICATION_TIMESTAMP_GRAIN VARCHAR2(30 ), 
	LAYER VARCHAR2(15 BYTE) , 
  PARTITION_KEY VARCHAR2(4000),
  CREATED_BY VARCHAR2(10 ), 
  CREATED_ON TIMESTAMP (6), 
  UPDATED_BY VARCHAR2(10),
  UPDATED_ON TIMESTAMP(6));


INSERT INTO OBJECT
   (
  OBJECT_KEY , 
	SYSTEM_SCHEMA_KEY ,
	TARGET_OBJECT_NAME ,
	OBJECT_SHORT_NAME,
	TARGET_DB ,
	SOURCE_OBJECT_NAME ,
	SOURCE_OBJECT_TYPE,
	SAS_LIB_REF ,
	PK_COLUMN_NAMES ,
	NK_COLUMN_NAMES ,
	EXCLUDED_COLUMNS ,
	LOAD_PATTERN_NAME , 
	SENSITIVE_DATA_FLAG ,
	RETENTION_KEY ,
	CUSTOM_SQL ,
	CHANGE_CAPTURE_TIMESTAMP_COLUMN ,
	HISTORY_LOADED_FROM_TDW,
	HISTORY_TYPE ,
	EFFECTIVE_FROM_TIMESTAMP_COLUMN ,
	EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	EFFECTIVE_TIMESTAMP_GRAIN ,
	PURGE_GRAIN ,
	DUPLICATION_TIMESTAMP_GRAIN ,
	LAYER ,
  PARTITION_KEY ,
  CREATED_BY ,
  CREATED_ON ,
  UPDATED_BY ,
  UPDATED_ON )
SELECT
OBJECT_KEY , 
	SYSTEM_SCHEMA_KEY ,
	TARGET_OBJECT_NAME ,
	OBJECT_SHORT_NAME,
	TARGET_DB ,
	SOURCE_OBJECT_NAME ,
	SOURCE_OBJECT_TYPE,
	SAS_LIB_REF ,
	PK_COLUMN_NAMES ,
	NK_COLUMN_NAMES ,
	EXCLUDED_COLUMNS ,
	LOAD_PATTERN_NAME , 
	SENSITIVE_DATA_FLAG ,
	RETENTION_KEY ,
	CUSTOM_SQL ,
	CHANGE_CAPTURE_TIMESTAMP_COLUMN ,
	HISTORY_LOADED_FROM_TDW,
	HISTORY_TYPE ,
	EFFECTIVE_FROM_TIMESTAMP_COLUMN ,
	EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	EFFECTIVE_TIMESTAMP_GRAIN ,
	PURGE_GRAIN ,
	DUPLICATION_TIMESTAMP_GRAIN ,
	LAYER ,
  NULL AS PARTITION_KEY ,
  CREATED_BY ,
  CREATED_DATE  AS CREATED_ON ,
  NULL AS UPDATED_BY ,
  NULL UPDATED_ON
FROM OBJECT_&current_date;

COMMIT;

SELECT * FROM OBJECT;

RENAME OBJECT_HIST TO OBJECT_HIST_&current_date;

DROP TABLE OBJECT_HIST;
CREATE TABLE LCF.OBJECT_HIST 
   (	
  OBJECT_KEY NUMBER(10,0), 
	SYSTEM_SCHEMA_KEY NUMBER(10,0), 
	TARGET_OBJECT_NAME VARCHAR2(30), 
	OBJECT_SHORT_NAME VARCHAR2(25), 
	TARGET_DB VARCHAR2(30 BYTE) , 
	SOURCE_OBJECT_NAME VARCHAR2(30), 
	SOURCE_OBJECT_TYPE VARCHAR2(5) , 
	SAS_LIB_REF VARCHAR2(30), 
	PK_COLUMN_NAMES VARCHAR2(500), 
	NK_COLUMN_NAMES VARCHAR2(500), 
	EXCLUDED_COLUMNS CLOB, 
	LOAD_PATTERN_NAME VARCHAR2(30 ) , 
	SENSITIVE_DATA_FLAG VARCHAR2(1), 
	RETENTION_KEY NUMBER(10,0), 
	CUSTOM_SQL CLOB, 
	CHANGE_CAPTURE_TIMESTAMP_COLUMN VARCHAR2(50), 
	HISTORY_LOADED_FROM_TDW VARCHAR2(1 ), 
	HISTORY_TYPE VARCHAR2(5), 
	EFFECTIVE_FROM_TIMESTAMP_COLUMN VARCHAR2(50 ), 
	EFFECTIVE_TO_TIMESTAMP_COLUMN VARCHAR2(50 ), 
	EFFECTIVE_TIMESTAMP_GRAIN VARCHAR2(30 ), 
	PURGE_GRAIN VARCHAR2(30), 
	DUPLICATION_TIMESTAMP_GRAIN VARCHAR2(30 ), 
	LAYER VARCHAR2(15 BYTE) , 
  PARTITION_KEY VARCHAR2(4000),
  CREATED_BY VARCHAR2(10 ), 
  CREATED_ON TIMESTAMP (6), 
  UPDATED_BY VARCHAR2(10),
  UPDATED_ON TIMESTAMP(6),
  LAST_UPDATED_TIME TIMESTAMP (6));

  

  INSERT INTO OBJECT_HIST
  ( OBJECT_KEY , 
	SYSTEM_SCHEMA_KEY ,
	TARGET_OBJECT_NAME ,
	OBJECT_SHORT_NAME,
	TARGET_DB ,
	SOURCE_OBJECT_NAME ,
	SOURCE_OBJECT_TYPE,
	SAS_LIB_REF ,
	PK_COLUMN_NAMES ,
	NK_COLUMN_NAMES ,
	EXCLUDED_COLUMNS ,
	LOAD_PATTERN_NAME , 
	SENSITIVE_DATA_FLAG ,
	RETENTION_KEY ,
	CUSTOM_SQL ,
	CHANGE_CAPTURE_TIMESTAMP_COLUMN ,
	HISTORY_LOADED_FROM_TDW,
	HISTORY_TYPE ,
	EFFECTIVE_FROM_TIMESTAMP_COLUMN ,
	EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	EFFECTIVE_TIMESTAMP_GRAIN ,
	PURGE_GRAIN ,
	DUPLICATION_TIMESTAMP_GRAIN ,
	LAYER ,
  PARTITION_KEY ,
  CREATED_BY ,
  CREATED_ON ,
  UPDATED_BY ,
  UPDATED_ON,
  LAST_UPDATED_TIME)
  SELECT 
  OBJECT_KEY , 
	SYSTEM_SCHEMA_KEY ,
	TARGET_OBJECT_NAME ,
	OBJECT_SHORT_NAME,
	TARGET_DB ,
	SOURCE_OBJECT_NAME ,
	SOURCE_OBJECT_TYPE,
	SAS_LIB_REF ,
	PK_COLUMN_NAMES ,
	NK_COLUMN_NAMES ,
	EXCLUDED_COLUMNS ,
	LOAD_PATTERN_NAME , 
	SENSITIVE_DATA_FLAG ,
	RETENTION_KEY ,
	CUSTOM_SQL ,
	SUBSTR(CHANGE_CAPTURE_TIMESTAMP_COLUMN,1,50) ,
	HISTORY_LOADED_FROM_TDW,
	HISTORY_TYPE ,
	SUBSTR(EFFECTIVE_FROM_TIMESTAMP_COLUMN,1,50),
	EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	EFFECTIVE_TIMESTAMP_GRAIN ,
	PURGE_GRAIN ,
	DUPLICATION_TIMESTAMP_GRAIN ,
	LAYER ,
  NULL AS PARTITION_KEY ,
  NULL AS CREATED_BY ,
  NULL AS CREATED_ON ,
  NULL AS UPDATED_BY ,
  NULL AS UPDATED_ON,
  LAST_UPDATE_TIME 
  FROM OBJECT_HIST_&current_date;

COMMIT;
--------------------------------------------------------
--  DDL for Index OBJECT_PK
--------------------------------------------------------
ALTER TABLE OBJECT_CONTROL DROP CONSTRAINT OBJECT_OBJECT_CONTROL_FK;
ALTER TABLE OBJECT_&current_date DROP CONSTRAINT SYSTEM_SCHEMA_OBJECT_FK;
ALTER TABLE OBJECT_&current_date DROP CONSTRAINT ING_MODE_CK;
ALTER TABLE OBJECT_&current_date DROP CONSTRAINT OBJECT_PK;
DROP INDEX OBJECT_PK;

CREATE UNIQUE INDEX LCF.OBJECT_PK ON LCF.OBJECT (OBJECT_KEY) ;
------------------------------------------------------
--  DDL for Trigger TRG_OBJECT_HIST
--------------------------------------------------------

DROP TRIGGER  LCF.TRG_OBJECT_HIST; 
CREATE OR REPLACE EDITIONABLE TRIGGER LCF.TRG_OBJECT_HIST
AFTER  
INSERT OR UPDATE ON LCF.OBJECT 
FOR EACH ROW 
BEGIN
IF INSERTING THEN 
INSERT INTO LCF.OBJECT_HIST
( OBJECT_KEY , 
	SYSTEM_SCHEMA_KEY ,
	TARGET_OBJECT_NAME ,
	OBJECT_SHORT_NAME,
	TARGET_DB ,
	SOURCE_OBJECT_NAME ,
	SOURCE_OBJECT_TYPE,
	SAS_LIB_REF ,
	PK_COLUMN_NAMES ,
	NK_COLUMN_NAMES ,
	EXCLUDED_COLUMNS ,
	LOAD_PATTERN_NAME , 
	SENSITIVE_DATA_FLAG ,
	RETENTION_KEY ,
	CUSTOM_SQL ,
	CHANGE_CAPTURE_TIMESTAMP_COLUMN ,
	HISTORY_LOADED_FROM_TDW,
	HISTORY_TYPE ,
	EFFECTIVE_FROM_TIMESTAMP_COLUMN ,
	EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	EFFECTIVE_TIMESTAMP_GRAIN ,
	PURGE_GRAIN ,
	DUPLICATION_TIMESTAMP_GRAIN ,
	LAYER ,
  PARTITION_KEY ,
  CREATED_BY ,
  CREATED_ON ,
  UPDATED_BY ,
  UPDATED_ON,
  LAST_UPDATED_TIME
  )
VALUES
  (
  :new.OBJECT_KEY , 
	:new.SYSTEM_SCHEMA_KEY ,
	:new.TARGET_OBJECT_NAME ,
	:new.OBJECT_SHORT_NAME,
	:new.TARGET_DB ,
	:new.SOURCE_OBJECT_NAME ,
	:new.SOURCE_OBJECT_TYPE,
	:new.SAS_LIB_REF ,
	:new.PK_COLUMN_NAMES ,
	:new.NK_COLUMN_NAMES ,
	:new.EXCLUDED_COLUMNS ,
	:new.LOAD_PATTERN_NAME , 
	:new.SENSITIVE_DATA_FLAG ,
	:new.RETENTION_KEY ,
	:new.CUSTOM_SQL ,
	:new.CHANGE_CAPTURE_TIMESTAMP_COLUMN ,
	:new.HISTORY_LOADED_FROM_TDW,
	:new.HISTORY_TYPE ,
	:new.EFFECTIVE_FROM_TIMESTAMP_COLUMN ,
	:new.EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	:new.EFFECTIVE_TIMESTAMP_GRAIN ,
	:new.PURGE_GRAIN ,
	:new.DUPLICATION_TIMESTAMP_GRAIN ,
	:new.LAYER ,
  :new.PARTITION_KEY ,
  :new.CREATED_BY ,
  :new.CREATED_ON ,
  :new.UPDATED_BY ,
  :new.UPDATED_ON,
  SYSDATE);
  END IF;
  IF UPDATING THEN 
  INSERT INTO LCF.OBJECT_HIST
  ( 
   OBJECT_KEY , 
	SYSTEM_SCHEMA_KEY ,
	TARGET_OBJECT_NAME ,
	OBJECT_SHORT_NAME,
	TARGET_DB ,
	SOURCE_OBJECT_NAME ,
	SOURCE_OBJECT_TYPE,
	SAS_LIB_REF ,
	PK_COLUMN_NAMES ,
	NK_COLUMN_NAMES ,
	EXCLUDED_COLUMNS ,
	LOAD_PATTERN_NAME , 
	SENSITIVE_DATA_FLAG ,
	RETENTION_KEY ,
	CUSTOM_SQL ,
	CHANGE_CAPTURE_TIMESTAMP_COLUMN ,
	HISTORY_LOADED_FROM_TDW,
	HISTORY_TYPE ,
	EFFECTIVE_FROM_TIMESTAMP_COLUMN ,
	EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	EFFECTIVE_TIMESTAMP_GRAIN ,
	PURGE_GRAIN ,
	DUPLICATION_TIMESTAMP_GRAIN ,
	LAYER ,
  PARTITION_KEY ,
  CREATED_BY ,
  CREATED_ON ,
  UPDATED_BY ,
  UPDATED_ON,
  LAST_UPDATED_TIME )
  VALUES 
  (
  :old.OBJECT_KEY , 
	:old.SYSTEM_SCHEMA_KEY ,
	:old.TARGET_OBJECT_NAME ,
	:old.OBJECT_SHORT_NAME,
	:old.TARGET_DB ,
	:old.SOURCE_OBJECT_NAME ,
	:old.SOURCE_OBJECT_TYPE,
	:old.SAS_LIB_REF ,
	:old.PK_COLUMN_NAMES ,
	:old.NK_COLUMN_NAMES ,
	:old.EXCLUDED_COLUMNS ,
	:old.LOAD_PATTERN_NAME , 
	:old.SENSITIVE_DATA_FLAG ,
	:old.RETENTION_KEY ,
	:old.CUSTOM_SQL ,
	:old.CHANGE_CAPTURE_TIMESTAMP_COLUMN ,
	:old.HISTORY_LOADED_FROM_TDW,
	:old.HISTORY_TYPE ,
	:old.EFFECTIVE_FROM_TIMESTAMP_COLUMN ,
	:old.EFFECTIVE_TO_TIMESTAMP_COLUMN ,
	:old.EFFECTIVE_TIMESTAMP_GRAIN ,
	:old.PURGE_GRAIN ,
	:old.DUPLICATION_TIMESTAMP_GRAIN ,
	:old.LAYER ,
  :old.PARTITION_KEY ,
  :old.CREATED_BY ,
  :old.CREATED_ON ,
  :old.UPDATED_BY ,
  :old.UPDATED_ON,
  SYSDATE      );
END IF;
END;
/




ALTER TRIGGER LCF.TRG_OBJECT_HIST ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_OBJECT_KEY
--------------------------------------------------------
DROP TRIGGER LCF.TRG_OBJECT_KEY ;
CREATE OR REPLACE EDITIONABLE TRIGGER LCF.TRG_OBJECT_KEY 
BEFORE INSERT ON LCF.OBJECT
FOR EACH ROW
BEGIN
	SELECT seq_OBJECT_KEY.nextval
		INTO :NEW.OBJECT_KEY
		FROM DUAL;
END;
/
ALTER TRIGGER LCF.TRG_OBJECT_KEY ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_OBJECT_CONTROL_LOAD
--------------------------------------------------------
DROP TRIGGER LCF.TRG_OBJECT_CONTROL_LOAD;
CREATE OR REPLACE EDITIONABLE TRIGGER LCF.TRG_OBJECT_CONTROL_LOAD
AFTER  
INSERT OR UPDATE ON LCF.OBJECT
 
FOR EACH ROW 
BEGIN
IF INSERTING THEN 
INSERT INTO LCF.OBJECT_CONTROL
( SYSTEM_SCHEMA_KEY      ,  
  OBJECT_KEY,
  TARGET_OBJECT_NAME  )
VALUES
  (
:new.SYSTEM_SCHEMA_KEY      ,  
:new.OBJECT_KEY,
:new.TARGET_OBJECT_NAME   );
END IF;
IF UPDATING THEN 
      UPDATE LCF.OBJECT_CONTROL
       SET TARGET_OBJECT_NAME=:new.TARGET_OBJECT_NAME
       WHERE :old.OBJECT_KEY=OBJECT_CONTROL.OBJECT_KEY;
END IF;

END;
/
ALTER TRIGGER LCF.TRG_OBJECT_CONTROL_LOAD ENABLE;
--------------------------------------------------------
--  Constraints for Table OBJECT
--------------------------------------------------------

  ALTER TABLE LCF.OBJECT_CONTROL ADD CONSTRAINT ING_MODE_CK CHECK (INGESTION_MODE IN ('JNL', 'ALL', 'ING','NA')) ENABLE;
  --ALTER TABLE LCF.OBJECT MODIFY (OBJECT_KEY NOT NULL ENABLE);
  --ALTER TABLE LCF.OBJECT MODIFY (SYSTEM_SCHEMA_KEY NOT NULL ENABLE);
  ALTER TABLE LCF.OBJECT ADD CONSTRAINT OBJECT_PK PRIMARY KEY (OBJECT_KEY) USING INDEX OBJECT_PK;

ALTER TABLE LCF.OBJECT_CONTROL 
    ADD CONSTRAINT OBJECT_OBJECT_CONTROL_FK FOREIGN KEY (OBJECT_KEY )
        REFERENCES LCF.OBJECT ( OBJECT_KEY ) ON DELETE CASCADE
  DEFERRABLE;
  
  ALTER TABLE LCF.OBJECT
    ADD CONSTRAINT SRC_TGT_SCHEMA_OBJECT_FK  FOREIGN KEY ( SYSTEM_SCHEMA_KEY )
        REFERENCES LCF.SRC_TGT_SCHEMA ( SYSTEM_SCHEMA_KEY )
  DEFERRABLE;
  
CREATE OR REPLACE TRIGGER TRG_SRC_TGT_SCHEMA_KEY
BEFORE INSERT ON LCF.SRC_TGT_SCHEMA
FOR EACH ROW
BEGIN
	SELECT  seq_SYSTEM_SCHEMA_KEY.nextval
		INTO :NEW.SYSTEM_SCHEMA_KEY
		FROM DUAL;
END;

--------------------------------------------------------
--  LOAD_PATTERN
--------------------------------------------------------  
  
  DROP TABLE LOAD_PATTERN;
  CREATE TABLE LOAD_PATTERN
  (LOAD_PATTERN_KEY NUMBER(5),
   LOAD_PATTERN_NAME VARCHAR2(30),
   DESCRIPTION VARCHAR2(200));
   
   ALTER TABLE LOAD_PATTERN ADD CONSTRAINT LOAD_PATTERN_PK  PRIMARY KEY (LOAD_PATTERN_KEY);
   
   INSERT INTO LOAD_PATTERN VALUES (1,'CHANGEEXTRACT','Change history is captured using an Effective Timestamp Column ');
   INSERT INTO LOAD_PATTERN VALUES (2,'EVENTEXTRACT','Suitable for transaction tables where no existing records are ever updated, but new records are inserted into the table on an ongoing basis');
   INSERT INTO LOAD_PATTERN VALUES (3,'FULLREPLACEMENT','For truncate and load scnarios');
   INSERT INTO LOAD_PATTERN VALUES (4,'FULLCOMPARISON','To determine changes from the previous load requires an explicit calculation of the difference between the current state and the previously load.');
   INSERT INTO LOAD_PATTERN VALUES (5,'BATCHEXTRACT','Special case of a change extract where batches of records forming a historical record or association are replaced en mass');

commit;
--------------------------------------------------------
--  ETL_RESUORCES
--------------------------------------------------------
   
   DROP TABLE ETL_RESOURCES;
   CREATE TABLE ETL_RESOURCES
   (ETL_RESOURCE_KEY NUMBER(5),
    LOGON_ID VARCHAR2(10),
    ETL_DEVELOPER  VARCHAR2(15));
   
   INSERT INTO ETL_RESOURCES VALUES (1,'ird0nxa','NALAKA');
   INSERT INTO ETL_RESOURCES VALUES (2,'ird0sxd','SANDA');
   INSERT INTO ETL_RESOURCES VALUES (3,'ird0mxw','MAX');
   INSERT INTO ETL_RESOURCES VALUES (4,'ird0lxf','LAURIE');
   INSERT INTO ETL_RESOURCES VALUES (5,'ird0dxm','DANIEL');
   INSERT INTO ETL_RESOURCES VALUES (6,'ird0axs','AARON'); 
   INSERT INTO ETL_RESOURCES VALUES (7,'ird0dxi','DAN'); 
   INSERT INTO ETL_RESOURCES VALUES (8,'ird0qal','QUAN'); 
   INSERT INTO ETL_RESOURCES VALUES (9,'ird0nxa','NATALIYA'); 
   INSERT INTO ETL_RESOURCES VALUES (10,'ird0sxw','SCOTT'); 
   
   COMMIT;
 
 
--------------------------------------------------------
--  OBJECT_CONTROL
--------------------------------------------------------
     
ALTER TABLE OBJECT_CONTROL RENAME COLUMN UPDATE_BY TO UPDATED_BY;

drop trigger LCF.TRG_OBJECT_CONTROL_PRE_UPDATE;

CREATE OR REPLACE TRIGGER LCF.TRG_OBJECT_CONTROL_PRE_UPDATE
BEFORE UPDATE ON LCF.OBJECT_CONTROL
FOR EACH ROW
BEGIN
    SELECT SYSTIMESTAMP INTO :NEW.UPDATED_ON from dual;
    SELECT sys_context( 'userenv', 'os_user' ) INTO :NEW.UPDATED_BY FROM DUAL;
END;
/


ALTER TABLE TASK DROP CONSTRAINT TASK_TYPE_CK    ;
ALTER TABLE TASK add CONSTRAINT TASK_TYPE_CK    CHECK (TASK_TYPE IN ('STRUCTURECHANGE', 'BUGFIX', 'FASTCOPY','PATTERNCHANGE','JOBCHANGE','OTHER','DATAFIX','PERFORMANCE','APEX','INITIAL','DOCUMENTATION'));


--------------------------------------------------------
--  Grants
--------------------------------------------------------

GRANT ALL ON  OBJECT_RUN TO LCF_ROLE;
GRANT SELECT ON OBJECT TO LCF_ROLE;

GRANT ALL ON  DIP_OBJECT_RUN TO LCF_ROLE;
GRANT SELECT ON seq_object_run_key TO LCF_ROLE;
GRANT SELECT ON  seq_dip_object_run_key TO LCF_ROLE;
GRANT SELECT ON V_DOMAIN_INFO TO LCF_ROLE;

GRANT SELECT ON SRC_TGT_SYSTEM TO LCF_ROLE;
GRANT SELECT ON SRC_TGT_SCHEMA TO LCF_ROLE;



GRANT SELECT ON SRC_TGT_SYSTEM TO RO_LCF_ROLE;
GRANT SELECT ON SRC_TGT_SCHEMA TO RO_LCF_ROLE;
GRANT SELECT ON OBJECT TO RO_LCF_ROLE;
GRANT SELECT ON OBJECT_CONTROL TO RO_LCF_ROLE;

 UPDATE SRC_TGT_SCHEMA SET SYSTEM_KEY=3 WHERE SCHEMA_NAME IN ('NZP_GTFRD','NZP_GTREF','NZP_GTSTC','NZP_GTWEB');
 COMMIT;
--------------------------------------------------------
--  END
--------------------------------------------------------
